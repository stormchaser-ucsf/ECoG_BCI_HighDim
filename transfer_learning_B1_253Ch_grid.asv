
clc;clear
root_path = 'F:\DATA\ecog data\ECoG BCI\GangulyServer\Multistate B3';
addpath(genpath('C:\Users\nikic\Documents\GitHub\ECoG_BCI_HighDim'))
cd(root_path)
addpath('C:\Users\nikic\Documents\MATLAB\DrosteEffect-BrewerMap-5b84f95')
load session_data_B3
addpath 'C:\Users\nikic\Documents\MATLAB'

%% load B3's Data from 11 days of daily 7DoF initialization
load condn_data_overall_B3

%% build a PnP decoder from B3
% split into training and testing trials, 20% val, 80% train
xx=1;xx1=1;yy=0;
prop = 0.8;
while xx<7 || xx1<7 
    I = ones(length(condn_data_overall),1);
    train_val_idx = find(I~=0);
    tmp_idx = randperm(length(train_val_idx),round(prop*length(train_val_idx)));
    train_idx = train_val_idx(tmp_idx);train_idx=train_idx(:);    
    I([train_idx])=0;
    val_idx = find(I~=0);val_idx=val_idx(:);
    xx = length(unique([condn_data_overall(train_idx).targetID]));
    xx1 = length(unique([condn_data_overall(val_idx).targetID]));    
    yy=yy+1;
end

% training options for NN
[options,XTrain,YTrain] = ...
    get_options(condn_data_overall,val_idx,train_idx);

% build MLP
aa=condn_data_overall(1).neural;
s=size(aa,1);
layers = get_layers1(120,s);
net_B3_PnP_trfLearn = trainNetwork(XTrain,YTrain,layers,options);

% save the weights
save net_B3_PnP_trfLearn net_B3_PnP_trfLearn -v7.3

%% load B1's data from daily 7DoF initialization with new 253 grid

cd 'F:\DATA\ecog data\ECoG BCI\GangulyServer\Multistate clicker'
root_path=pwd;
foldernames={'20240614', '20240517', '20240515', '20240508'};
files=[];file_type=[];
for i=1:length(foldernames)
    fullpath = fullfile(root_path,foldernames{i},'Robot3DArrow');
    tmp_files = findfiles('.mat',fullpath,1)';
    tmp_files1=[];k=1;
    for j=1:length(tmp_files)
        if length(regexp(tmp_files{j},'kf_params'))==0
            tmp_files1 = [tmp_files1;tmp_files(j)];
        end
    end
    files=[files;tmp_files1];
end

% load the data 
condn_data = load_data_for_MLP_TrialLevel_B3(files);

condn_data_overall = condn_data;

% prune to only the first 7 actions
condn_data_overall1={};kk=1;
for ii=1:length(condn_data_overall)   
    if ~isempty(condn_data_overall(ii).neural) && condn_data_overall(ii).targetID <=7
        condn_data_overall1(kk).neural = condn_data_overall(ii).neural;
        condn_data_overall1(kk).targetID = condn_data_overall(ii).targetID;
        condn_data_overall1(kk).trial_type = condn_data_overall(ii).trial_type;
        kk=kk+1;
    end
end
condn_data_overall = condn_data_overall1;


%% Fine tune the weights of B3 PnP decoder with B1's data

xx=1;xx1=1;yy=0;
prop = 0.8;
while xx<7 || xx1<7 
    I = ones(length(condn_data_overall),1);
    train_val_idx = find(I~=0);
    tmp_idx = randperm(length(train_val_idx),round(prop*length(train_val_idx)));
    train_idx = train_val_idx(tmp_idx);train_idx=train_idx(:);    
    I([train_idx])=0;
    val_idx = find(I~=0);val_idx=val_idx(:);
    xx = length(unique([condn_data_overall(train_idx).targetID]));
    xx1 = length(unique([condn_data_overall(val_idx).targetID]));    
    yy=yy+1;
end

% training options for NN
[options,XTrain,YTrain] = ...
    get_options(condn_data_overall,val_idx,train_idx);

% data augmentation of the training data 
condn_data_overall_data_aug
for i=1:7    
    idx = find([condn_data_overall(1:end).targetID]==i);
    open_idx=[];closed_idx=[];
    for j=1:length(idx)
        if size(condn_data_overall(idx(j)).neural,2) >20
            open_idx=[open_idx;j];
        else
            closed_idx=[closed_idx;j];
        end
    end

    % open loop data
    tmp=[];
    
    for 


    % closed loop data 


end


% build MLP
%aa=condn_data_overall(1).neural;
%s=size(aa,1);
%layers = get_layers1(120,s);
layers = net_B3_PnP_trfLearn.Layers;
net_B1_253_TrfLearn = trainNetwork(XTrain,YTrain,layers,options);

% save the weights
save net_B1_253_TrfLearn net_B1_253_TrfLearn -v7.3




